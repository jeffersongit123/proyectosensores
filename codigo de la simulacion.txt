https://wokwi.com/projects/404004890491629569


SIMULACIÓN EN WOKWI SIMULADOR:

CODIGO:


#include <HX711.h>
#include <WiFi.h>
#include <HTTPClient.h>

const int ld_cell = 2; 
const int ld_sck = 4;
HX711 scale;

// Cambia la red WiFi a Wokwi-GUEST sin contraseña
const char* ssid = "Wokwi-GUEST";
const char* password = ""; 
const String serverUrl = "https://servidorintermedio.onrender.com/update";  // Cambia según tu servidor desplegado

void setup() {
  Serial.begin(115200);
  scale.begin(ld_cell, ld_sck);

  // Conectar a WiFi
  WiFi.begin(ssid, password);
  Serial.print("Conectando a WiFi");
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) {  // Intentos limitados a 20
    delay(500);
    Serial.print(".");
    attempts++;
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("Conectado a WiFi");
  } else {
    Serial.println("No se pudo conectar a WiFi");
    ESP.restart();  // Reinicia el ESP32 si no se pudo conectar a WiFi
  }
}

void loop() {
  if (scale.is_ready()) {
    // Leer el peso
    long reading = scale.get_units(10);
    float weight = reading / 419.8;
    Serial.println(weight);

    // Enviar datos al servidor
    HTTPClient http;
    http.begin(serverUrl);
    http.addHeader("Content-Type", "application/json");
    String payload = "{\"weight\": " + String(weight) + "}";
    int httpResponseCode = http.POST(payload);
    if (httpResponseCode > 0) {
      String response = http.getString();
      Serial.println("Respuesta del servidor: " + response);
    } else {
      Serial.println("Error en la solicitud. Código de respuesta: " + String(httpResponseCode));
    }
    http.end();
  } else {
    Serial.println("Error: La célula de carga no está lista.");
  }
  delay(10000); // Enviar datos cada 20 segundos
}

